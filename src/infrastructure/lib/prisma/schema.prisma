// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Seller {
  id       String   @id @default(uuid())
  userName String
  password String
  phone    String
  email    String
  balance  Int
  img      String?
  Namuna   Namuna[]
  Mijoz    Mijoz[]
}

model Admin {
  id       String @id @default(uuid())
  userName String
  password String
  phone    String
  email    String
}

model Mijoz {
  id           String         @id @default(uuid())
  name         String
  address      String
  note         String
  sellerId     String
  star         Boolean?       @default(true)
  ImagesClient ImagesClient[]
  PhoneClient  PhoneClient[]
  Message      Message[]
  Debt         Debt[]
  seller       Seller         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  Chat         Chat[]
}

model PhoneClient {
  id          String @id @default(uuid())
  phoneNumber String
  mijozId     String
  mijoz       Mijoz  @relation(fields: [mijozId], references: [id], onDelete: Cascade)
}

model ImagesClient {
  id      String @id @default(uuid())
  url     String
  mijozId String

  mijoz Mijoz @relation(fields: [mijozId], references: [id], onDelete: Cascade)
}

model Message {
  id String @id @default(uuid())

  mijozId   String
  text      String        @default("")
  status    MessageStatus @default(PENDING)
  creadetAt DateTime      @default(now())

  mijoz  Mijoz   @relation(fields: [mijozId], references: [id], onDelete: Cascade)
  Chat   Chat?   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String?
}

enum MessageStatus {
  SENT
  FAILED
  PENDING
}

model Chat {
  id        String    @id @default(uuid())
  mijozId   String
  mijoz     Mijoz     @relation(fields: [mijozId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
}

model Debt {
  id         String       @id @default(uuid())
  name       String
  date       DateTime     @default(now())
  amount     Int
  paidAmount Int          @default(0)
  muddat     String
  note       String
  mijozId    String
  mijoz      Mijoz        @relation(fields: [mijozId], references: [id], onDelete: Cascade)
  ImagesDebt ImagesDebt[]
  Tolovlar   Tolovlar[]
}

model ImagesDebt {
  id     String @id @default(uuid())
  url    String
  debtId String

  debt Debt @relation(fields: [debtId], references: [id], onDelete: Cascade)
}

model Tolovlar {
  id       String     @id @default(uuid())
  debtId   String
  amount   Int
  date     DateTime   @default(now())
  method   methodType
  duration String?
  months   Int[]
  debt     Debt       @relation(fields: [debtId], references: [id], onDelete: Cascade)
  TolovOy  TolovOy[]
}

model TolovOy {
  id            String     @id @default(uuid())
  month         Int
  tolovId       String
  status        statusType @default(PENDING)
  partialAmount Int?
  tolov         Tolovlar   @relation(fields: [tolovId], references: [id], onDelete: Cascade)
}

enum methodType {
  ONE_MONTH
  CUSTOM
  MULTI_MONTH
}

enum statusType {
  PAID
  UNPAID
  PENDING
}

model Namuna {
  id        String   @id @default(uuid())
  text      String
  sellerId  String
  creadetAt DateTime @default(now())
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
}
